{"version":3,"sources":["utils/EditorThemes.js","utils/theme.js","utils/global.js","App.js","serviceWorker.js","index.js"],"names":["themes","lightTheme","body","text","toggleBorder","gradient","darkTheme","boxShadow","GlobalStyles","createGlobalStyle","theme","App","props","toggleTheme","state","setState","defaultOptions","loop","autoplay","animationData","rendererSettings","preserveAspectRatio","ref","React","createRef","markdown","selectedTheme","this","themeOptions","map","i","className","key","options","height","width","isStopped","isPaused","name","id","aria-label","aria-required","onChange","e","updateEditorTheme","target","value","mode","stat","console","log","highlightActiveLine","wrapEnabled","fontSize","editorProps","$blockScrolling","onClick","icon","faSun","faMoon","strikethrough","underline","tables","emoji","toPdf","targetRef","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d3e54216.chunk.js","sourcesContent":["const themes = [\n    \"github\",\n    \"monokai\",\n    \"tomorrow\",\n    \"kuroir\",\n    \"twilight\",\n    \"xcode\",\n    \"textmate\",\n    \"solarized_dark\",\n    \"solarized_light\",\n    \"terminal\"\n];\n\nexport default themes;\n  ","export const lightTheme = {\n    body: '#E2E2E2',\n    text: '#363537',\n    toggleBorder: '#FFF',\n    gradient: 'linear-gradient(#39598A, #79D7ED)',\n    // boxShadow :\n  }\n  \n  export const darkTheme = {\n    body: 'background: linear-gradient(145deg, #090d2c, #0b0f34)',\n    text: '#FAFAFA',\n    toggleBorder: '#6B8096',\n    gradient: 'linear-gradient(#091236, #1E215D)',\n    boxShadow : 'box-shadow:  50px 50px 100px #05071a ,-50px -50px 100px #0f1548 ',\n  }","import { createGlobalStyle } from 'styled-components';\n\nexport const GlobalStyles = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    box-sizing: border-box;\n  }\n\n  body {\n    align-items: center;\n    background: ${({ theme }) => theme.body};\n    color: ${({ theme }) => theme.text};\n  }\n  .box-size {\n    \n  }\n  \n  `\n","import React, { Component } from \"react\";\nimport AceEditor from \"react-ace\";\nimport MarkdownView from \"react-showdown\";\nimport themes from \"./utils/EditorThemes\";\nimport \"ace-builds/src-noconflict/ace\";\nimport \"ace-builds/src-noconflict/mode-markdown\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport \"ace-builds/src-noconflict/theme-kuroir\";\nimport \"ace-builds/src-noconflict/theme-twilight\";\nimport \"ace-builds/src-noconflict/theme-xcode\";\nimport \"ace-builds/src-noconflict/theme-textmate\";\nimport \"ace-builds/src-noconflict/theme-solarized_dark\";\nimport \"ace-builds/src-noconflict/theme-solarized_light\";\nimport \"ace-builds/src-noconflict/theme-terminal\";\nimport './App.css';\nimport { ThemeProvider } from 'styled-components';\nimport { lightTheme, darkTheme } from './utils/theme';\nimport { GlobalStyles } from './utils/global';\nimport ReactToPdf from \"react-to-pdf\";\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faMoon} from '@fortawesome/free-solid-svg-icons';\nimport { faSun} from '@fortawesome/free-solid-svg-icons';\nimport Lottie from 'react-lottie';\nimport animationData from './lf30_editor_kDMQ53.json';\n\n\n\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.ref = React.createRef();\n    this.state = {\n      markdown: `## :heart: Hello, I'm a REACT-Markdown Editor.\n### \n\nBonus points:\n\n- Live preview\n- Selectable themes for input area\n- Dark Mood and Light Mood\n- Print to PDF\n- Responsive design\n`,\n      theme: \"github\"\n    };\n  }\n\n  updateEditorTheme(selectedTheme) {\n    this.setState({\n      theme: selectedTheme\n    });\n  }\n\n\n  toggleTheme = () => {\n    if (this.state.theme === 'light') {\n      this.setState({theme : 'dark'});\n    } else {\n      this.setState({theme : 'light'});\n    }\n  }\n  defaultOptions = {\n    loop: true,\n    autoplay: true, \n    animationData: animationData,\n    rendererSettings: {\n      preserveAspectRatio: 'xMidYMid slice'\n    }\n  };\n  \n  render() {\n    const { markdown, theme } = this.state;\n    const themeOptions = themes.map((theme, i) => (\n      <option className=\"theme-option\" key={i}>\n        {theme}\n      </option>\n    ));\n\n    return (\n      <div className=\"App\">\n        <ThemeProvider theme={theme === 'light' ? lightTheme : darkTheme}>\n        <h1 className=\"title\">Markdown Editor</h1>\n        <GlobalStyles />\n        <div className=\"hi\">\n        <Lottie options={this.defaultOptions}\n              height={230}\n              width={480}\n              isStopped={this.state.isStopped}\n              isPaused={this.state.isPaused}\n              className=\"hi\"\n        />\n        </div>\n        \n        <div className=\"container\">\n          <div className=\"theme\">\n            <div className=\"theme-selector\">\n              <label>Select Editor Theme: </label>\n              <select\n                name=\"theme-names\"\n                id=\"theme-names\"\n                aria-label=\"Select a theme for your editor\"\n                aria-required=\"false\"\n                onChange={e => this.updateEditorTheme(e.target.value)}\n              >\n                {themeOptions}\n              </select>\n            </div>\n            <AceEditor\n              className=\"editor box-size\"\n              mode=\"markdown\"\n              theme={theme}\n              onChange={(value, stat) => {\n                this.setState({\n                  markdown: value\n                });\n                console.log(\"onChange\", value, stat);\n              }}\n              highlightActiveLine={true}\n              wrapEnabled={true}\n              fontSize={14}\n              value={markdown}\n              name=\"UNIQUE_ID_OF_DIV\"\n              editorProps={{ $blockScrolling: true }}\n            />\n          </div>\n          <div>\n          \n          <div className= {this.state.theme === 'light' ? 'Menu-link moodLight'  : 'Menu-link moodDark'} onClick={this.toggleTheme}>\n            {this.state.theme === 'light' ?  <FontAwesomeIcon icon={ faSun } className='icons' /> :<FontAwesomeIcon icon={ faMoon } className='icons' /> }\n            <p>{this.state.theme === 'light' ? 'Light Mood'  : 'Dark Mood'} </p>\n          </div>\n          \n          <MarkdownView ref={this.ref}\n            className=\"view box-size\"\n            markdown={markdown}\n            options={{\n              strikethrough: true,\n              underline: true,\n              tables: true,\n              emoji: true\n            }}\n          />\n        <ReactToPdf>\n          {({toPdf, targetRef}) =>  (\n            <button  onClick={toPdf} ref={targetRef}>PDF</button>\n          )}\n        </ReactToPdf>\n          </div>\n          \n        </div>\n        </ThemeProvider>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}